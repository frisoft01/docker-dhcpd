#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Jan  1 15:05:02 2025
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn webmin/setup.sh
match_max 100000
expect -exact "****************************************************************************\r
           Welcome to the Webmin setup script, version 2.202\r
****************************************************************************\r
Webmin is a web-based interface that allows Unix-like operating\r
systems and common Unix services to be easily administered.\r
\r
Installing Webmin in /opt/webmin-2.202\r
\r
****************************************************************************\r
Webmin uses separate directories for configuration files and log files.\r
Unless you want to run multiple versions of Webmin at the same time\r
you can just accept the defaults.\r
\r
Config file directory \[/etc/webmin\]: "
send -- "\r"
expect -exact "\r
Log file directory \[/var/webmin\]: "
send -- "/var/log/webmin\r"
expect -exact "/var/log/webmin\r
\r
****************************************************************************\r
Webmin is written entirely in Perl. Please enter the full path to the\r
Perl 5 interpreter on your system.\r
\r
Full path to perl (default /usr/bin/perl): "
send -- "\r"
expect -exact "\r
\r
Testing Perl ..\r
.. done\r
\r
****************************************************************************\r
Operating system name:    Generic Linux\r
Operating system version: 6.1\r
\r
****************************************************************************\r
Webmin uses its own password protected web server to provide access\r
to the administration programs. The setup script needs to know :\r
 - What port to run the web server on. There must not be another\r
   web server already using this port.\r
 - The login name required to access the web server.\r
 - The password required to access the web server.\r
 - If the web server should use SSL (if your system supports it).\r
 - Whether to start webmin at boot time.\r
\r
Web server port (default 10000): "
send -- "\r"
expect -exact "\r
Login name (default admin): "
send -- "root\r"
expect -exact "root\r
Login password: "
send -- "admin\r"
expect -exact "\r
Password again: "
send -- "admin\r"
expect -exact "\r
Use SSL (y/n): "
send -- "y\r"
expect -exact "y\r
Start Webmin at boot time (y/n): "
send -- "n\r"
expect eof
